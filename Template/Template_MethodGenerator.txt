using static SatorImaging.UnitySourceGenerator.USGFullNameOf;
using SatorImaging.UnitySourceGenerator;
using System.Text;
using Debug = UnityEngine.Debug;
using Object = UnityEngine.Object;
#if UNITY_EDITOR
using UnityEditor;
#endif

#ROOTNAMESPACEBEGIN#
    // HOW TO USE: Add the following attribute to *target* class.
    //             Note that target class must be defined as partial.
    //[UnitySourceGenerator(typeof(#SCRIPTNAME#), OverwriteIfFileExists = false)]
    public partial class #SCRIPTNAME#
    {
#if UNITY_EDITOR   // USG: class definition is required to avoid build error but methods are not.
#pragma warning disable IDE0051

        readonly static string MEMBER_ACCESS = "internal";
        readonly static string MAIN_MEMBER_NAME = __________________________;
        static string OutputFileName() => MAIN_MEMBER_NAME + ".cs";  // -> Name.<TargetClass>.<GeneratorClass>.g.cs

        static bool Emit(USGContext context, StringBuilder sb)
        {
            // USG: static classes are IsAbstract is set.
            if (!context.TargetClass.IsClass)
                return false;  // return false to tell USG doesn't write file.

            // USG: you can modify output path. default file name is that USG generated.
            //      note that USG doesn't care the modified path is valid or not.
            //context.OutputPath += "_MyFirstTest.txt";

            // USG: EditorUtility.DisplayDialog() or others don't work in batch mode.
            //      throw if method depending on GUI based functions.
            //if (UnityEngine.Application.isBatchMode)
            //    throw new System.NotSupportedException("GUI based functions do nothing in batch mode.");

            // USG: write content into passed StringBuilder.
            sb.Append($@"
using System;
using System.Collections.Generic;
using UnityEngine;
using Debug = UnityEngine.Debug;
using Object = UnityEngine.Object;

namespace {context.TargetClass.Namespace}
{{
    partial class {context.TargetClass.Name}
    {{
");
            // class open ----------------------------------------------------------------------


            #region  // USG: MainMember
            sb.Append($@"
        {MEMBER_ACCESS} void {MAIN_MEMBER_NAME}()
        {{
");
            sb.IndentLevel(3);



            // USG: semicolon?
            sb.Append($@"
        }}
");
            #endregion


            // class close ----------------------------------------------------------------------
            sb.Append($@"
    }}
}}
");

            // USG: return true to tell USG to write content into OutputPath. false to do nothing.
            return true;
        }

#pragma warning restore IDE0051
#endif
    }
#ROOTNAMESPACEEND#
